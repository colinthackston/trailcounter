ARM GAS  /tmp/ccwS24pA.s 			page 1


   1              	# 1 "../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s"
   1              	/*
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    crt0_v7m.s
  22              	 * @brief   Generic ARMv7-M (Cortex-M3/M4/M7) startup file for ChibiOS.
  23              	 *
  24              	 * @addtogroup ARMCMx_GCC_STARTUP_V7M
  25              	 * @{
  26              	 */
  27              	
  28              	/*===========================================================================*/
  29              	/* Module constants.                                                         */
  30              	/*===========================================================================*/
  31              	
  32              	#if !defined(FALSE) || defined(__DOXYGEN__)
  33              	#define FALSE                               0
  34              	#endif
  35              	
  36              	#if !defined(TRUE) || defined(__DOXYGEN__)
  37              	#define TRUE                                1
  38              	#endif
  39              	
  40              	#define CONTROL_MODE_PRIVILEGED             0
  41              	#define CONTROL_MODE_UNPRIVILEGED           1
  42              	#define CONTROL_USE_MSP                     0
  43              	#define CONTROL_USE_PSP                     2
  44              	#define CONTROL_FPCA                        4
  45              	
  46              	#define FPCCR_ASPEN                         (1 << 31)
  47              	#define FPCCR_LSPEN                         (1 << 30)
  48              	
  49              	#define SCB_CPACR                           0xE000ED88
  50              	#define SCB_FPCCR                           0xE000EF34
  51              	#define SCB_FPDSCR                          0xE000EF3C
  52              	
  53              	/*===========================================================================*/
  54              	/* Module pre-compile time settings.                                         */
ARM GAS  /tmp/ccwS24pA.s 			page 2


  55              	/*===========================================================================*/
  56              	
  57              	/**
  58              	 * @brief   FPU initialization switch.
  59              	 */
  60              	#if !defined(CRT0_INIT_FPU) || defined(__DOXYGEN__)
  61              	#if defined(CORTEX_USE_FPU) || defined(__DOXYGEN__)
  62              	#define CRT0_INIT_FPU                       CORTEX_USE_FPU
  63              	#else
  64              	#define CRT0_INIT_FPU                       FALSE
  65              	#endif
  66              	#endif
  67              	
  68              	/**
  69              	 * @brief   Control special register initialization value.
  70              	 * @details The system is setup to run in privileged mode using the PSP
  71              	 *          stack (dual stack mode).
  72              	 */
  73              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  74              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  75              	                                             CONTROL_MODE_PRIVILEGED)
  76              	#endif
  77              	
  78              	/**
  79              	 * @brief   Core initialization switch.
  80              	 */
  81              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  82              	#define CRT0_INIT_CORE                      TRUE
  83              	#endif
  84              	
  85              	/**
  86              	 * @brief   Stack segments initialization switch.
  87              	 */
  88              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
  89              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
  90              	#endif
  91              	
  92              	/**
  93              	 * @brief   Stack segments initialization switch.
  94              	 */
  95              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
  96              	#define CRT0_INIT_STACKS                    TRUE
  97              	#endif
  98              	
  99              	/**
 100              	 * @brief   DATA segment initialization switch.
 101              	 */
 102              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 103              	#define CRT0_INIT_DATA                      TRUE
 104              	#endif
 105              	
 106              	/**
 107              	 * @brief   BSS segment initialization switch.
 108              	 */
 109              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 110              	#define CRT0_INIT_BSS                       TRUE
 111              	#endif
ARM GAS  /tmp/ccwS24pA.s 			page 3


 112              	
 113              	/**
 114              	 * @brief   RAM areas initialization switch.
 115              	 */
 116              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 117              	#define CRT0_INIT_RAM_AREAS                 TRUE
 118              	#endif
 119              	
 120              	/**
 121              	 * @brief   Constructors invocation switch.
 122              	 */
 123              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 124              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 125              	#endif
 126              	
 127              	/**
 128              	 * @brief   Destructors invocation switch.
 129              	 */
 130              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 131              	#define CRT0_CALL_DESTRUCTORS               TRUE
 132              	#endif
 133              	
 134              	/**
 135              	 * @brief   FPU FPCCR register initialization value.
 136              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 137              	 */
 138              	#if !defined(CRT0_FPCCR_INIT) || defined(__DOXYGEN__)
 139              	#define CRT0_FPCCR_INIT                     (FPCCR_ASPEN | FPCCR_LSPEN)
 140              	#endif
 141              	
 142              	/**
 143              	 * @brief   CPACR register initialization value.
 144              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 145              	 */
 146              	#if !defined(CRT0_CPACR_INIT) || defined(__DOXYGEN__)
 147              	#define CRT0_CPACR_INIT                     0x00F00000
 148              	#endif
 149              	
 150              	/*===========================================================================*/
 151              	/* Code section.                                                             */
 152              	/*===========================================================================*/
 153              	
 154              	#if !defined(__DOXYGEN__)
 155              	
 156              	                .syntax unified
 157              	                .cpu    cortex-m3
 158              	#if CRT0_INIT_FPU == TRUE
 159              	                .fpu    fpv4-sp-d16
 160              	#else
 161              	                .fpu    softvfp
 162              	#endif
 163              	
 164              	                .thumb
 165              	                .text
 166              	
 167              	/*
 168              	 * Reset handler.
ARM GAS  /tmp/ccwS24pA.s 			page 4


 169              	 */
 170              	                .align  2
 171              	                .thumb_func
 172              	                .global Reset_Handler
 173              	Reset_Handler:
 174              	                /* Interrupts are globally masked initially.*/
 175 0000 72B6     	                cpsid   i
 176              	
 177              	                /* PSP stack pointers initialization.*/
 178 0002 2648     	                ldr     r0, =__process_stack_end__
 179 0004 80F30988 	                msr     PSP, r0
 180              	
 181              	#if CRT0_INIT_FPU == TRUE
 182              	                /* FPU FPCCR initialization.*/
 183              	                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 184              	                movt    r0, #CRT0_FPCCR_INIT >> 16
 185              	                movw    r1, #SCB_FPCCR & 0xFFFF
 186              	                movt    r1, #SCB_FPCCR >> 16
 187              	                str     r0, [r1]
 188              	                dsb
 189              	                isb
 190              	
 191              	                /* CPACR initialization.*/
 192              	                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 193              	                movt    r0, #CRT0_CPACR_INIT >> 16
 194              	                movw    r1, #SCB_CPACR & 0xFFFF
 195              	                movt    r1, #SCB_CPACR >> 16
 196              	                str     r0, [r1]
 197              	                dsb
 198              	                isb
 199              	
 200              	                /* FPU FPSCR initially cleared.*/
 201              	                mov     r0, #0
 202              	                vmsr    FPSCR, r0
 203              	
 204              	                /* FPU FPDSCR initially cleared.*/
 205              	                movw    r1, #SCB_FPDSCR & 0xFFFF
 206              	                movt    r1, #SCB_FPDSCR >> 16
 207              	                str     r0, [r1]
 208              	
 209              	                /* Enforcing FPCA bit in the CONTROL register.*/
 210              	                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 211              	
 212              	#else
 213 0008 0220     	                movs    r0, #CRT0_CONTROL_INIT
 214              	#endif
 215              	
 216              	                /* CONTROL register initialization as configured.*/
 217 000a 80F31488 	                msr     CONTROL, r0
 218 000e BFF36F8F 	                isb
 219              	
 220              	#if CRT0_INIT_CORE == TRUE
 221              	                /* Core initialization.*/
 222 0012 FFF7FEFF 	                bl      __core_init
 223              	#endif
 224              	
 225              	                /* Early initialization.*/
ARM GAS  /tmp/ccwS24pA.s 			page 5


 226 0016 FFF7FEFF 	                bl      __early_init
 227              	
 228              	#if CRT0_INIT_STACKS == TRUE
 229 001a 2148     	                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 230              	                /* Main Stack initialization. Note, it assumes that the
 231              	                   stack size is a multiple of 4 so the linker file must
 232              	                   ensure this.*/
 233 001c 2149     	                ldr     r1, =__main_stack_base__
 234 001e 224A     	                ldr     r2, =__main_stack_end__
 235              	msloop:
 236 0020 9142     	                cmp     r1, r2
 237 0022 3CBF     	                itt     lo
 238 0024 41F8040B 	                strlo   r0, [r1], #4
 239 0028 FFF7FABF 	                blo     msloop
 240              	
 241              	                /* Process Stack initialization. Note, it assumes that the
 242              	                   stack size is a multiple of 4 so the linker file must
 243              	                   ensure this.*/
 244 002c 1F49     	                ldr     r1, =__process_stack_base__
 245 002e 1B4A     	                ldr     r2, =__process_stack_end__
 246              	psloop:
 247 0030 9142     	                cmp     r1, r2
 248 0032 3CBF     	                itt     lo
 249 0034 41F8040B 	                strlo   r0, [r1], #4
 250 0038 FFF7FABF 	                blo     psloop
 251              	#endif
 252              	
 253              	#if CRT0_INIT_DATA == TRUE
 254              	                /* Data initialization. Note, it assumes that the DATA size
 255              	                  is a multiple of 4 so the linker file must ensure this.*/
 256 003c 1C49     	                ldr     r1, =_textdata_start
 257 003e 1D4A     	                ldr     r2, =_data_start
 258 0040 1D4B     	                ldr     r3, =_data_end
 259              	dloop:
 260 0042 9A42     	                cmp     r2, r3
 261 0044 3EBF     	                ittt    lo
 262 0046 51F8040B 	                ldrlo   r0, [r1], #4
 263 004a 42F8040B 	                strlo   r0, [r2], #4
 264 004e FFF7F8BF 	                blo     dloop
 265              	#endif
 266              	
 267              	#if CRT0_INIT_BSS == TRUE
 268              	                /* BSS initialization. Note, it assumes that the DATA size
 269              	                  is a multiple of 4 so the linker file must ensure this.*/
 270 0052 0020     	                movs    r0, #0
 271 0054 1949     	                ldr     r1, =_bss_start
 272 0056 1A4A     	                ldr     r2, =_bss_end
 273              	bloop:
 274 0058 9142     	                cmp     r1, r2
 275 005a 3CBF     	                itt     lo
 276 005c 41F8040B 	                strlo   r0, [r1], #4
 277 0060 FFF7FABF 	                blo     bloop
 278              	#endif
 279              	
 280              	#if CRT0_INIT_RAM_AREAS == TRUE
 281              	                /* RAM areas initialization.*/
 282 0064 FFF7FEFF 	                bl      __init_ram_areas
ARM GAS  /tmp/ccwS24pA.s 			page 6


 283              	#endif
 284              	
 285              	                /* Late initialization..*/
 286 0068 FFF7FEFF 	                bl      __late_init
 287              	
 288              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 289              	                /* Constructors invocation.*/
 290 006c 154C     	                ldr     r4, =__init_array_start
 291 006e 164D     	                ldr     r5, =__init_array_end
 292              	initloop:
 293 0070 AC42     	                cmp     r4, r5
 294 0072 80F20580 	                bge     endinitloop
 295 0076 54F8041B 	                ldr     r1, [r4], #4
 296 007a 8847     	                blx     r1
 297 007c FFF7F8BF 	                b       initloop
 298              	endinitloop:
 299              	#endif
 300              	
 301              	                /* Main program invocation, r0 contains the returned value.*/
 302 0080 FFF7FEFF 	                bl      main
 303              	
 304              	#if CRT0_CALL_DESTRUCTORS == TRUE
 305              	                /* Destructors invocation.*/
 306 0084 114C     	                ldr     r4, =__fini_array_start
 307 0086 124D     	                ldr     r5, =__fini_array_end
 308              	finiloop:
 309 0088 AC42     	                cmp     r4, r5
 310 008a 80F20580 	                bge     endfiniloop
 311 008e 54F8041B 	                ldr     r1, [r4], #4
 312 0092 8847     	                blx     r1
 313 0094 FFF7F8BF 	                b       finiloop
 314              	endfiniloop:
 315              	#endif
 316              	
 317              	                /* Branching to the defined exit handler.*/
 318 0098 FFF7FEBF 	                b       __default_exit
 318      00000000 
 318      55555555 
 318      00000000 
 318      00000000 
ARM GAS  /tmp/ccwS24pA.s 			page 7


DEFINED SYMBOLS
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:170    .text:00000000 $t
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:173    .text:00000000 Reset_Handler
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:235    .text:00000020 msloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:246    .text:00000030 psloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:259    .text:00000042 dloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:273    .text:00000058 bloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:292    .text:00000070 initloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:298    .text:00000080 endinitloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:308    .text:00000088 finiloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:314    .text:00000098 endfiniloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:318    .text:0000009c $d

UNDEFINED SYMBOLS
__process_stack_end__
__core_init
__early_init
__main_stack_base__
__main_stack_end__
__process_stack_base__
_textdata_start
_data_start
_data_end
_bss_start
_bss_end
__init_ram_areas
__late_init
__init_array_start
__init_array_end
main
__fini_array_start
__fini_array_end
__default_exit
